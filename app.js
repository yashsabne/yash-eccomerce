require("dotenv").config();const express=require("express"),mongoose=require("mongoose"),passportLocalMongoose=require("passport-local-mongoose"),passport=require("passport"),LocalStrategy=require("passport-local").Strategy,session=require("express-session"),path=require("path"),fs=require("fs"),bcrypt=require("bcryptjs"),nodemailer=require("nodemailer"),bodyParser=require("body-parser"),{config:e,configDotenv:r}=require("dotenv"),app=express(),axios=require("axios"),dayjs=require("dayjs"),Razorpay=require("razorpay"),{type:t}=require("os"),PORT=process.env.PORT||3e3;app.set("view engine","ejs"),app.set("views",path.join(__dirname,"views")),app.use(express.static(path.join(__dirname,"public"))),app.use(bodyParser.urlencoded({extended:!0})),app.use(bodyParser.json()),mongoose.connect(process.env.MONGO_URL);const User=mongoose.model("User",new mongoose.Schema({username:String,password:String,phone:Number,nameU:String,dob:String,firstLetterOfUser:String,googleId:String,nameGoogle:String,cart:[{type:Object,ref:"Product"}],address:[{type:Object,ref:"Address"}],orders:[{address:{type:Object,required:!0},deliveringProducts:{type:Array,required:!0},paymentMethodSelected:{type:Boolean,required:!0},selectedPaymentMethod:{type:String,default:null},paymentDone:{type:Boolean,default:!1},DateAndTimeHere:{type:String,required:!0},total:{type:Number}}]})),DeliverySchema=new mongoose.Schema({date:{type:Date,required:!0},price:{type:Number,required:!0}}),Delivery=mongoose.model("Delivery",DeliverySchema);app.use(session({secret:"yourdfijsukghruheuuklsfdmcskksksfshfbsbhdhdebfhsdhz",resave:!1,saveUninitialized:!0})),app.use(passport.initialize()),app.use(passport.session());const productPath=path.join(__dirname,"products.json"),productData=fs.readFileSync(productPath,"utf8"),product=JSON.parse(productData);function readProductsFromFile(){let e=fs.readFileSync("products.json");return JSON.parse(e)}app.get("/products",(e,r)=>{r.json(product)}),app.get("/",async(e,r)=>{r.render("index")}),app.get("/login",(e,r)=>{r.render("login")}),app.get("/register",(e,r)=>{r.render("register")}),app.post("/send-email-otp",async(e,r)=>{try{let t=e.body.username,s=(1e4*Math.random()).toFixed(0);e.session.otp=s;console.log(s);let o=nodemailer.createTransport({host:"smtp-relay.brevo.com",port:587,secure:!1,auth:{user:process.env.USEROTP,pass:process.env.PASSOTP}}),a={from:"yashsabne39@gmail.com",to:t,subject:"OTP for registration",html:`<p>Hello ${t},</p><p>Nice to see you here. Here is your OTP for login: <strong>${s}</strong></p>`};o.sendMail(a,(e,t)=>e?(console.error(e),r.status(500).send("Error sending email")):(console.log("Email sent: "+t.response),r.status(200).send("Email sent successfully")))}catch(d){console.log("Error occurred",d),r.status(500).json({error:"Error sending OTP"})}}),app.post("/verify-otp",(e,r)=>{let{username:t,otp:s}=e.body;s===e.session.otp?r.json({success:!0}):r.json({success:!1})}),app.post("/register",async function(e,r){let t=e.body.username,s=new User({username:e.body.username,password:e.body.password,phone:e.body.phone,nameU:e.body.fullName,dob:e.body.dob,otp:e.body.otp,firstLetterOfUser:t.charAt(0)});try{let o=e.body.username,a=await User.findOne({username:o});if(a)return r.send("User already exists");if(e.body.otp!==e.session.otp)return r.send("Incorrect OTP");let d=await bcrypt.hash(e.body.password,10);s.password=d,await s.save(),r.render("login")}catch(n){console.error(n),r.status(500).render("error",{errorMessage:"Internal Server Error"})}}),app.post("/login",async function(e,r){try{let t=e.body.username,s=e.body.password,o=await User.findOne({username:t});if(o){let a=await bcrypt.compare(s,o.password);if(a){e.session.userId=o._id,e.session.save();let d=e.session.userId,n=await User.findById(d),i=n.cart.length,p=n.firstLetterOfUser;r.render("index",{cartLength:i,firstLetterOfUser:p})}else r.render("login",{errorMessage:"Incorrect username or password"})}else r.render("login",{errorMessage:"User not found"})}catch(l){console.error(l),r.status(500).send("Internal Server Error")}}),app.get("/logout",(e,r)=>{e.session.destroy(e=>{e&&console.error("Error destroying session:",e),r.redirect("/login")})}),app.post("/add-to-cart",async function(e,r){try{let t=e.body.productId,s=e.body.productName,o=e.body.productPrice,a=e.body.productImage,d=e.body.productRating,n=e.body.productCategory,i=e.body.quantityOfItem;console.log(i);let p=e.session.userId;if(!p)return r.render("login");let l=readProductsFromFile(),c=l.find(e=>e.id===t);if(!c)return console.log("product added");let u=await User.findById(p);if(!u)return r.status(404).send("User not found. Please login into your account");u.cart.push({productId:t,productName:s,productPrice:o,productRating:d,productImage:a,productCategory:n,quantityOfItem:i}),await u.save()}catch(y){console.error(y),r.status(500).send("Internal Server Error")}}),app.get("/cart",async(e,r)=>{try{let t=e.session.userId;if(!t)return r.render("loginCart");let s=await User.findById(t);if(!s)return r.render("loginCart");let o=0===s.cart.length,a=s.cart.length,d=[];s.cart.forEach(e=>{d.push(e.quantityOfItem)});let n=[];for(let i=0;i<a;i++)n.push(s.cart[i]);let p=[];s.cart.forEach(e=>{e.productPrice&&p.push(e.productPrice)});let l=[];for(let c=0;c<d.length;c++)l.push(d[c]*p[c]);let u=0;l.forEach(e=>{u+=e});let y=u,f;f=y>500?0:0===y?0:40;let g=parseInt(parseInt(y)+parseInt(f)).toFixed(2),h;h=g<900?0:parseInt(.05*g);let m=(parseInt(g)+parseInt(h)).toFixed(2),$=s.firstLetterOfUser;r.render("cart",{cartItems:s.cart,cartIsEmpty:o,cartItemNumber:a,totalSum:g,shipppingCharges:f,taxesOnProducts:h,totalAfterTax:m,firstLetterOfUser:$,totalSumBeforeShipping:y})}catch(b){console.error(b),r.status(500).send("Internal Server Error")}}),app.post("/delete-product",async(e,r)=>{try{let t=parseInt(e.body.productId),s=e.session.userId;if(!s)return r.render("loginCart");let o=await User.findById(s);if(!o)return r.render("loginCart");o.cart=o.cart.filter(e=>e.productId!==parseInt(t)),await o.save()}catch(a){console.error(a),r.status(500).send("Internal Server Error")}}),app.post("/delete-product",async(e,r)=>{try{parseInt(e.body.productId)}catch(t){console.error(t),r.status(500).send("Internal Server Error")}}),app.get("/address",async(e,r)=>{let t=e.session.userId;if(!t)return r.redirect("/login");try{let s=await User.findById(t);if(!s){r.send("User not found.");return}let o=s.address;if(!o){r.send("Address not found for the user.");return}let a=s.cart.length,d=[];s.cart.forEach(e=>{d.push(e.quantityOfItem)});let n=[];for(let i=0;i<a;i++)n.push(s.cart[i]);let p=[];n.forEach(e=>{p.push(e.productPrice)});let l=[];for(let c=0;c<d.length;c++)l.push(d[c]*p[c]);let u=0;l.forEach(e=>{u+=e});let y=u,f;f=y>500?0:40;let g=parseInt(parseInt(y)+parseInt(f)).toFixed(2),h;h=g<900?0:parseInt(.05*g);let m=(parseInt(g)+parseInt(h)).toFixed(2);s.cart;let $=s.firstLetterOfUser;r.render("address",{addresses:o,cartItemNumber:a,totalSum:g,shipppingCharges:f,taxesOnProducts:h,totalAfterTax:m,firstLetterOfUser:$})}catch(b){console.error("Error fetching address:",b),r.status(500).send("Internal Server Error")}}),app.get("/getTotalPiceWithDescription",async(e,r)=>{let t=e.session.userId;if(!t)return r.redirect("/login");try{let s=await User.findById(t);if(!s){r.send("User not found.");return}let o=s.nameU,a=s.username,d=s.cart.length,n=[];s.cart.forEach(e=>{n.push(e.quantityOfItem)});let i=[];for(let p=0;p<d;p++)i.push(s.cart[p]);let l=[];i.forEach(e=>{l.push(e.productPrice)});let c=[];for(let u=0;u<n.length;u++)c.push(n[u]*l[u]);let y=0;c.forEach(e=>{y+=e});let f=y,g;g=f>500?0:40;let h=parseInt(parseInt(f)+parseInt(g)).toFixed(2),m;m=h<900?0:parseInt(.05*h);let $=(parseInt(h)+parseInt(m)).toFixed(2);r.json({totalAfterTax:$,userName:o,emailAdd:a}),await s.save()}catch(b){console.error("Error fetching address:",b),r.status(500).send("Internal Server Error")}}),app.post("/newAddress",async function(e,r){try{let t=e.body.countries,s=e.body.nameAddress,o=e.body.mobileAdd,a=e.body.pincodeAdd,d=e.body.houseAdd,n=e.body.villageAdd,i=e.body.landmarkAdd,p=e.body.townAdd,l=e.body.State,c=e.session.userId;if(!c)return r.render("login");let u=await User.findById(c);if(!u)return r.render("login");u.address.push({country:t,fullName:s,mobileNumber:o,pincode:a,flatHouse:d,AreaOrVillage:n,Landmark:i,City:p,State:l}),await u.save(),r.redirect("address")}catch(y){console.log("Error occurred",y),r.send(y)}}),app.post("/delete-add",async(e,r)=>{try{let t=parseInt(e.body.index),s=e.session.userId;if(!s)return r.render("loginCart");let o=await User.findById(s);if(!o)return r.render("loginCart");o.address=o.address.filter((e,r)=>r!==t),await o.save(),o.save=!0,r.redirect("address")}catch(a){console.error(a),r.status(500).send("Internal Server Error")}}),app.post("/orderConfirm",async(e,r)=>{try{let t=e.session.userId,s=await User.findById(t),o=s.nameU,a=s.username,{selectedAddressIndex:d,selectedPaymentMethod:n}=e.body,i=e.body.paymentDone,p=e.body.totalPrice,l=dayjs(),c=l.format("D MMMM, dddd");if(void 0===d)console.log("Please select the address");else{let u=s.cart,y=s.address[d];s.orders.push({address:y,deliveringProducts:u,paymentMethodSelected:void 0!==n,selectedPaymentMethod:n||null,paymentDone:i||!1,DateAndTimeHere:c,total:p})}await s.save();let f=nodemailer.createTransport({host:"smtp-relay.brevo.com",port:587,secure:!1,auth:{user:process.env.USEROTP,pass:process.env.PASSOTP}}),g={from:"yashsabne39@gmail.com",to:a,subject:"Hurray! Order confirmed successfully",html:`<p> Hello <b> ${o}</b>, your order is successfully placed! we will reach soon to you with your order </p>
                    <p>For Order details visit to our website<p>
                    <p>Thank you</p><p>Best Regards </p><p><b> Yash Store</b> </p>`};f.sendMail(g,(e,t)=>e?(console.error(e),r.status(500).send("Error sending email")):r.status(200).send("Email sent successfully")),r.render("orderSucess")}catch(h){console.error("Error confirming order:",h),r.status(500).json({error:"Failed to confirm order"})}}),app.get("/terms&condition",(e,r)=>{r.render("terms&condition")});const razorpay=new Razorpay({key_id:process.env.key_id,key_secret:process.env.key_secret});app.get("/orderSucess",async(e,r)=>{await r.render("orderSucess")}),app.get("/Orders",async(e,r)=>{try{let t=e.session.userId,s=await User.findById(t);s||r.render("login");let o=s.orders,a=o.map(e=>({deliveringProducts:e.deliveringProducts,deliveryDate:e.DateAndTimeHere,total:e.total,orderId:e._id}));r.render("Orders",{deliveringProductsOrDelivered:a})}catch(d){console.log(d),r.status(500).json({error:"Internal Server Error"})}}),app.listen(PORT,()=>{console.log(`Server is running on http://localhost:${PORT}`)});
